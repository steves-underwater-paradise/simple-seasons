//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck

plugins {
    id "fabric-loom" version "${loom_version}"
    id "maven-publish"
}

version = project.mod_version
group = project.maven_group

def archivesNameFabric = "${rootProject.mod_id}-fabric"

base {
    archivesName = archivesNameFabric
}

allprojects {
    version = "${rootProject.mod_version}+mc${rootProject.supported_minecraft_version_name}"
    group = rootProject.maven_group
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_namespace}.accesswidener")
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

    // Fabric Permissions API
    maven {
        name = "SonaType"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }

    // YetAnotherConfigLib
    maven {
        name "Xander Maven"
        url "https://maven.isxander.dev/releases"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Runtime mods
    modRuntimeOnly "maven.modrinth:cloth-config:${rootProject.cloth_config_version}"

    // Mixin Extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")))

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // Fabric Permissions API
    include(modImplementation("me.lucko:fabric-permissions-api:${rootProject.fabric_permissions_api_version}"))

    // Mod Menu
    modImplementation "maven.modrinth:modmenu:${rootProject.modmenu_version}"

    // YetAnotherConfigLib
    modImplementation("dev.isxander:yet-another-config-lib:${rootProject.yet_another_config_lib_version}-fabric")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "mod_id": rootProject.mod_id,
                "mod_namespace": rootProject.mod_namespace,
                "mod_name": rootProject.mod_name,
                "mod_description": rootProject.mod_description,
                "mod_license": rootProject.mod_license,
                "curseforge_project_id": rootProject.curseforge_project_id,
                "modrinth_project_id": rootProject.modrinth_project_id,
                "fabric_loader_version": rootProject.fabric_loader_version,
                "supported_minecraft_version": rootProject.supported_minecraft_version,
                "yet_another_config_lib_version": project.yet_another_config_lib_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = archivesNameFabric
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/steves-underwater-paradise/${rootProject.mod_id}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
